use std::str::FromStr;

use crate::syntax::{Op,Const,Expr,getvar,newvar,genvar,Var,Fundef,genname,Cmp};

grammar;
// # operator priority (descending order)
// : atom
// : array get
// : function application (left assoc)
// : - -. (prefix)
// : * / *. /. (left assoc)
// : + - +. - (left assoc)
// : = < (left assoc?)
// : <- (left assoc)
// : if 
// : ; (right assoc)
// : let , let rec


pub Expr = Seq;

Tier<Ops,NextTier>: Box<Expr> = {
    <e1:Tier<Ops,NextTier>> <op:Ops> <e2:NextTier> => Box::new(Expr::EOp(op, vec![e1,e2])),
    NextTier
};


Expr1 : Box<Expr> = {
   <e1:Expr1> "." "(" <e2:Expr> ")" => Box::new(Expr::EOp(Op::Load, vec![e1,e2])),
   Expr0,
};
Expr2 : Box<Expr> = {
    ArrayCreate <args:Actual_Args> => Box::new(Expr::EOp(Op::Array,args)),
    <e:SimpleExpr> <args:Actual_Args> => Box::new(Expr::EApp(e,args)),
    Expr1,
};
PrefixMinus: Op = {
    "-" => Op::Neg,
    "-." => Op::FNeg,
};

Expr3 : Box<Expr> = {
    <op:PrefixMinus> <e:Expr3>  =>
    {  match *e.clone() {
        Expr::EConst(c) => {
            match c {
                Const::CFloat(f) => Box::new(Expr::EConst(Const::CFloat(-f))),
                _ => Box::new(Expr::EOp(op, vec![e])),
            }
        },
        _ => Box::new(Expr::EOp(op, vec![e])),
       }
    },
    Expr2,
};


Expr4 = Tier<FactorOp, Expr3>;
Expr5 = Tier<TermOp, Expr4>; 
Expr6 = Tier<CondOp, Expr5>; 

Expr7: Box<Expr> = {
    <e1:Expr1> "." "(" <e2:Expr> ")" "<-" <e3:Expr8> => Box::new(Expr::EOp(Op::Store, vec![e1,e2,e3])),
    Expr6,
};
Expr8: Box<Expr> = {
    "if" <e1:Seq> "then" <e2:Seq> "else" <e3:Expr8>  => Box::new(Expr::EIf(e1,e2,e3)),
    Expr7,
};
//Expr82: Box<Expr> = {
//    "if" <e1:Seq> "then" <e2:Seq> "else" "let" <e3:Expr10_2>  => Box::new(Expr::EIf(e1,e2,e3)),
//    Expr8,
//};
Seq_sub: Box<Expr> = {
    <e1:Seq_sub> ";" <e2:Expr8>  => Box::new(Expr::ELet((genname(),genvar()),e1,e2)),
    Expr8,

}
Seq: Box<Expr> = {
    <e1:Seq_sub> ";"  <e2:Expr10> => Box::new(Expr::ELet((genname(),genvar()),e1,e2)),
    Expr10,
}
////Expr8_Seq:Box<Expr> = {
////    <e1:Expr8> ";" <e2:Expr8_Seq> => Box::new(Expr::ELet((genname(),genvar()),e1,e2)),
////    Expr8,
////};
////Expr10_2: Box<Expr> = {
////    <e1:Id> "=" <e2:Expr10> "in" <e3:Expr10> => Box::new(Expr::ELet((e1,genvar()),e2,e3)),
////    "(" <e1:Pat> ")" "=" <e2:Expr10> "in" <e3:Expr10> => Box::new(Expr::ELetTuple(e1,e2,e3)),
////    "rec" <f:Fun> "in" <cont:Expr10> => Box::new(Expr::ELetRec(f,cont)),
////};
//////
//Expr10_3: Box<Expr> = {
//    "let" <e1:Id> "=" <e2:Seq> "in" <e3:Expr10_3> => Box::new(Expr::ELet((e1,genvar()),e2,e3)),
//    "let" "(" <e1:Pat> ")" "=" <e2:Seq> "in" <e3:Expr10_3> => Box::new(Expr::ELetTuple(e1,e2,e3)),
//    "let" "rec" <f:Fun> "in" <cont:Expr10_3> => Box::new(Expr::ELetRec(f,cont)),
//    "if" <e1:Seq> "then" <e2:Seq> "else" <e3:Expr10_3>  => Box::new(Expr::EIf(e1,e2,e3)),
//}
//Expr10 : Box<Expr> = {
//    Expr10_3
//}
Expr10_2: Box<Expr> = {
    <e1:Id> "=" <e2:Seq> "in" <e3:Seq> => Box::new(Expr::ELet((e1,genvar()),e2,e3)),
    "(" <e1:Pat> ")" "=" <e2:Seq> "in" <e3:Seq> => Box::new(Expr::ELetTuple(e1,e2,e3)),
    "rec" <f:Fun> "in" <cont:Seq> => Box::new(Expr::ELetRec(f,cont)),
};

Expr10: Box<Expr> = {
    "let" <e1:Id> "=" <e2:Seq> "in" <e3:Seq> => Box::new(Expr::ELet((e1,genvar()),e2,e3)),
    "let" "(" <e1:Pat> ")" "=" <e2:Seq> "in" <e3:Seq> => Box::new(Expr::ELetTuple(e1,e2,e3)),
    "let" "rec" <f:Fun> "in" <cont:Seq> => Box::new(Expr::ELetRec(f,cont)),
    "if" <e1:Seq> "then" <e2:Seq> "else" "let" <e3:Expr10_2>  => Box::new(Expr::EIf(e1,e2,e3)),
    Expr8,
};
Elems: Vec<Box<Expr>> = {
    <e1:Elems> "," <e2:Expr> => {
        let mut v_ = e1;
        v_.push(e2);
        v_ 
    },
    <e1:Expr> "," <e2:Expr> => vec![e1,e2],
};
Pat: Vec<(Var,usize)> = {
    <e1:Pat> "," <e2:Id> => {
        let mut v_ = e1;
        v_.push((e2,genvar()));
        v_ 
    },
    <e1:Id> "," <e2:Id> => vec![(e1,genvar()),(e2,genvar())],
};

Fun : Fundef = {
    <n:Id> <args:Formal_Args> "=" <body:Seq> => 
        Fundef {
            name: (n,genvar()),
            args: args,
            body: body,
        },
};
Actual_Args: Vec<Box<Expr>> = {
    <a:Actual_Args> <e:Expr1> => {
        let mut v_ = a;
        v_.push(e);
        v_
    },
    Expr1 => vec![<>],
};
Formal_Args : Vec<(Var,usize)> = {
    <a:Id_args> <v:Formal_Args> => 
    {
        let mut v_ = v;
        v_.insert(0,(a,genvar()));
        v_
    },
    <a:Id_args>  => vec![(a,genvar())],
};

ArrayCreate: () = {
    "Array.make" => (),
    "create_array" => (),
};
CondOp : Op = {
    "<=" => Op::Cond(Cmp::LE),
    "<" => Op::Cond(Cmp::LT),
    ">=" => Op::Cond(Cmp::GE),
    ">" => Op::Cond(Cmp::GT),
    "=" => Op::Cond(Cmp::EQ),
    "<>" => Op::Cond(Cmp::NE),
};

TermOp : Op = {
    "+." => Op::FAdd,
    "-." => Op::FSub,
    "+" => Op::Add,
    "-" => Op::Sub,
};
FactorOp : Op = {
    "*." => Op::FMul,
    "/." => Op::FDiv,
    "*" => Op::Mul,
    "/" => Op::Div,
};

Expr0 = SimpleExpr;

pub SimpleExpr: Box<Expr> = {
    "(" <e:Expr> ")" => e,
    "()" => Box::new(Expr::EConst(Const::CUnit)),
    Int => Box::new(Expr::EConst(Const::CInt(<>))),
    Float => Box::new(Expr::EConst(Const::CFloat(<>))),
    Bool => Box::new(Expr::EConst(Const::CBool(<>))),
    Id => Box::new(Expr::EVar(<>)),
    "(" <e1:Elems> ")" => Box::new(Expr::ETuple(e1)),
};

pub Int: i32 = r"[0-9]+" => i32::from_str(<>).unwrap();
pub Float: f32 = {
    r"[0-9]+(\.[0-9]*)((e|E)(\+|-)?[0-9]+)?" => f32::from_str(<>).unwrap(),
};

pub Id_args: Var = {
    r"[a-z]([0-9]|[a-z]|[A-Z]|_)*" =>{
        getvar(String::from(<>))
    },
    "()" => genname(),
    "_" => genname(),

};
pub Id: Var = {
    r"[a-z]([0-9]|[a-z]|[A-Z]|_)*" => {
        debug!("found variable {}",<>);
        getvar(String::from(<>))
    },
    "_" => genname(),

};
pub Bool:bool = {
    "true" => true,
    "false" => false,
};
